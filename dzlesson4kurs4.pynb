{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPW7hUcaosUBMpOdJYbGS5n",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/drippystacie/codeoffuture/blob/main/dzlesson4kurs4.pynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "06YrFscVNArc",
        "outputId": "cc9678a4-6070-4fe0-b9bd-4575ecf2c68b"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'F1 мера для логистической регрессии: 0.8070175438596492, F1 мера для метода ближайших соседей: 0.8. Модель, лучше справившаяся с задачей, - **логистическая регрессия**.'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 1
        }
      ],
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.metrics import f1_score\n",
        "url = 'https://drive.google.com/file/d/1IaFylAoAAvW_213ZkZmb9unxeCxKT-O_/view'\n",
        "path = 'https://drive.google.com/uc?export=download&id=' + url.split('/')[-2]\n",
        "data = pd.read_csv(path)\n",
        "data.dropna(inplace=True)\n",
        "data = data.select_dtypes(exclude=['object'])\n",
        "scaler = StandardScaler()\n",
        "data_scaled = scaler.fit_transform(data.drop('Survived', axis=1))\n",
        "X_train, X_test, y_train, y_test = train_test_split(data_scaled, data['Survived'], test_size=0.2, random_state=42)\n",
        "logreg = LogisticRegression()\n",
        "logreg.fit(X_train, y_train)\n",
        "y_pred_logreg = logreg.predict(X_test)\n",
        "f1_logreg = f1_score(y_test, y_pred_logreg)\n",
        "knn = KNeighborsClassifier()\n",
        "knn.fit(X_train, y_train)\n",
        "y_pred_knn = knn.predict(X_test)\n",
        "f1_knn = f1_score(y_test, y_pred_knn)\n",
        "if f1_logreg > f1_knn:\n",
        "    result = \"логистическая регрессия\"\n",
        "else:\n",
        "    result = \"метод ближайших соседей\"\n",
        "\n",
        "f\"F1 мера для логистической регрессии: {f1_logreg}, F1 мера для метода ближайших соседей: {f1_knn}. Модель, лучше справившаяся с задачей, - **{result}**.\""
      ]
    }
  ]
}